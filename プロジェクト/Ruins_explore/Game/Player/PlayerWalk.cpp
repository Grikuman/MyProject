/*
    ファイル名：PlayerWalk.cpp
    　　　概要：プレイヤーの歩行状態を管理するクラス
*/
#include "pch.h"
#include "Player.h"
#include "PlayerWalk.h"
#include "WorkTool/DeviceResources.h"
#include "WorkTool/Graphics.h"
#include "WorkTool/Resources.h"
#include "WorkTool/InputDevice.h"

//---------------------------------------------------------
// コンストラクタ
//---------------------------------------------------------
PlayerWalk::PlayerWalk(Player* player)
	:
    m_player(player),
	m_model{}
{
}

//---------------------------------------------------------
// デストラクタ
//---------------------------------------------------------
PlayerWalk::~PlayerWalk()
{

}

//---------------------------------------------------------
// 初期化する
//---------------------------------------------------------
void PlayerWalk::Initialize()
{
    // モデルを取得する
    m_model = Resources::GetInstance()->GetModel(L"Player");
}

//---------------------------------------------------------
// 更新する
//---------------------------------------------------------
void PlayerWalk::Update(const float& elapsedTime)
{
    UNREFERENCED_PARAMETER(elapsedTime);
    
    // 歩行処理
    PlayerMove();
    // 歩行からダッシュへ
    WalkToDash();
    // 歩行から攻撃へ
    WalkToAttack();
}



//---------------------------------------------------------
// 描画する
//---------------------------------------------------------
void PlayerWalk::Render()
{
    
}


//---------------------------------------------------------
// 後始末する
//---------------------------------------------------------
void PlayerWalk::Finalize()
{
    
}

//---------------------------------------------------------
// 歩行処理
//---------------------------------------------------------
void PlayerWalk::PlayerMove()
{
    using namespace DirectX::SimpleMath;
    // キーボード入力を取得
    auto kb = InputDevice::GetInstance()->GetKeyboardState();

    // 移動処理
    if (kb->W || kb->Up)
    {
        m_player->AddVelocity(Vector3::Forward);
    }
    if (kb->S || kb->Down)
    {
        m_player->AddVelocity(Vector3::Backward);
    }

    // 回転処理
    if(kb->A || kb->Left)
    {
        // Y軸を中心に左回転を加算
        Quaternion rotation = Quaternion::CreateFromAxisAngle(Vector3::Up, DirectX::XMConvertToRadians(3.0f));
        m_player->AddAngle(rotation);
    }
    if (kb->D || kb->Right)
    {
        // Y軸を中心に右回転を加算
        Quaternion rotation = Quaternion::CreateFromAxisAngle(Vector3::Up, DirectX::XMConvertToRadians(-3.0f));
        m_player->AddAngle(rotation);
    }

    // 移動速度を補正
    m_player->ApplyVelocity(0.05f);

    // 移動させる
    m_player->SetPosition(m_player->GetPosition() + Vector3::Transform(m_player->GetVelocity(), m_player->GetAngle()));
}

//---------------------------------------------------------
// 歩行からダッシュへ
//---------------------------------------------------------
void PlayerWalk::WalkToDash()
{
    // キーボードを取得する
    auto dashkb = InputDevice::GetInstance()->GetKeyboardStateTracker();

    // スタミナがある場合
    if (m_player->GetStamina() >= 1)
    {
        // スペースキーを押したら
        if (dashkb->IsKeyPressed(DirectX::Keyboard::Space))
        {
            // スタミナを消費する
            m_player->SetStamina(m_player->GetStamina() - 1);
            // ステートをダッシュに変更する
            m_player->ChangeState(m_player->GetPlayerDash());
        }
    }
}

//---------------------------------------------------------
// 歩行から攻撃へ
//---------------------------------------------------------
void PlayerWalk::WalkToAttack()
{
    // キーボードを取得する
    auto kb = InputDevice::GetInstance()->GetKeyboardStateTracker();
    // マウスを取得する
    //auto mouse = InputDevice::GetInstance()

    // Fキーを押したら
    if (kb->IsKeyPressed(DirectX::Keyboard::F))
    {
        // ステートを攻撃に変更する
        m_player->ChangeState(m_player->GetPlayerAttack());
    }
    //if()
}
